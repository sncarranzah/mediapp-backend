spring.jpa.database=postgresql
spring.jpa.show-sql=false
#2.1.2 Introduccion a spring data jpa :: Spring Data jpa te permite trabajar con un motor de bd con cierta independecia del tipo de ese motor de bd. Pero habrá puntos, como es
#el caso de los procedimientos almacenados en que será inevitable escribir codigo que depende exclusivamenete del tipo de motor de bd con el que estamos trabajando. Un programa
#basado en JDBC es más rápido que un programa basado en una implementacion que JPA. Spring Data JPA trabaja internamente con el core de Hibernate.
# Esta linea es para determinar cómo spring va a llevar a cabo el enfoque code-first.
#La opcion create es para hacer un drop a todas las tablas y luego crear las tablas de bd en base al modelo de clases del codigo cada vez que
# se inicie la ejecucion del programa.
#La opcion create-drop es para crear las tablas de bd en base al modelo de clases del codigo cada vez que se ejecute el programa y luego
#hacer un drop table a las tablas cuando la ejecucion se termine.
#La opcion none es para no reflejar cambios DDL (create, drop, alter) del modelo de la clases en la bd, pero sí reflejar cambios DML
# (insert, delete, update) cada vez que se inicie la ejecucion del programa.
#La opcion validate no hace ningun cambio en la bd, solo valida que el modelo de clases coincida con el modelo de bd.
#La opcion update es para detectar las nuevas agregaciones de atributos, relaciones, clases en el modelo de clases para que luego sean creados en el modelo
#de bd cada vez que se inicie la ejecucion del proyecto, pero en el caso que un atributo ya existente en el modelo de clases cambie de nombre,
# el campo original respectivo que cambio de nombre es mantenido en el modelo de bd y ademas el atributo con el nombre cambiado, su campo
# reflejado es creado en el modelo de bd.
spring.jpa.hibernate.ddl-auto=update

spring.datasource.driver-class-name=org.postgresql.Driver
#2.1.3 Introduccion a spring data jpa :: Desde Spring Boot 3.1 el compilador te marca warning si no lo pones.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
#2.1.1 Introduccion a spring data jpa :: En este ejemplo vamos a usar el enfoque code-first, es decir vamos a crear y configurar el modelo de clases primero en el codigo de
# esta aplicacion y luego hacemos que spring genere el modelo de bd en base al modelo de clases ya configurado, con tan solo ejecutar la aplicación; a este proceso se le llama
# migración. La bd "mediapp_2024_1" tiene que estar previamente creada, aunque vacia, antes que la aplicacion se ejecute por primera vez.
spring.datasource.url=jdbc:postgresql://localhost:5432/mediapp_2024_1
spring.datasource.username=postgres
##2.1.4 Introduccion a spring data jpa ::esta es la clave que se fija al momento de instalar la bd.
spring.datasource.password=sasa

patient.controller.path=/patients
